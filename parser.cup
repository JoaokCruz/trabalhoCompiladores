/*Documentação: http://www2.cs.tum.edu/projects/cup/*/
import java_cup.runtime.*;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    // tabela de símbolos
    java.util.Map<String, Integer> simbolos = new java.util.HashMap<String, Integer>();
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminais (tokens retornados pelo scanner). */
//terminal            EOL, MAIS, MENOS, VEZES, DIV, QUADRADO, RAIZ, GUARDAR, EM, APAR, FPAR, QUE, ID, MAIOR, QUE, IGUAL, A, MENOR;
terminal            EOL, MAIS, MENOS, VEZES, DIV, QUADRADO, RAIZ, GUARDAR, EM, APAR, FPAR, QUE, ID, MAIOR, IGUAL, A, MENOR, SE, ENTAO;
terminal Integer    NUMERO;

/* Não terminais */
non terminal            inicio, exp;
non terminal Integer    expMat;      // utilizado para armazenar as subexpressões avaliadas
non terminal Boolean expLog;
//non terminal Boolean    expLog;
//non terminal            inicio, exp;
//non terminal Integer    expMat;      // utilizado para armazenar as subexpressões avaliadas
/* Precedência de operadores */
precedence left MAIS, MENOS;
precedence left VEZES, DIV;
precedence right QUADRADO;

inicio ::=  inicio exp:e EOL        {: System.out.println(e);         :}
            | exp:e EOL       {: System.out.println(e);         :}
            | inicio exp:e       {: System.out.println(e);         :}
            | exp:e       {: System.out.println(e);         :}
;

exp ::= GUARDAR expMat:e EM ID:i      {: simbolos.put(i.toString(), e); RESULT = e; :}
    |   expLog:e                        {:RESULT = e;:}
//    | SE expLog:e1 ENTAO exp:e2 {: RESULT = e1 ? e2 : null; :}
    | SE expLog:e1 ENTAO exp:e2 {: if( e1 ) { RESULT = e2; } :}
;

expLog ::=  expMat:e1 MAIOR QUE expMat:e2  {: RESULT = e1 > e2;  :}
            | expMat:e1 MENOR QUE expMat:e2 {: RESULT = e1 < e2; :}
            | expMat:e1 MAIOR IGUAL A expMat:e2 {: RESULT = e1 >= e2; :}
            | expMat:e1 MENOR IGUAL A expMat:e2 {: RESULT = e1 >= e2; :}
            | expMat:e1 IGUAL A  expMat:e2 {: RESULT = e1 == e2; :}
;

expMat ::= expMat:e1 VEZES expMat:e2        {: RESULT = e1*e2;                :}
           | expMat:e1 MENOS expMat:e2        {: RESULT = e1-e2;                :}
           | expMat:e1 MAIS expMat:e2        {: RESULT = e1+e2;                :}
           | expMat:e1 QUADRADO            {: RESULT = e1*e1;                :}
            | APAR expMat:e FPAR	     {: RESULT = (e);                    :}
            | NUMERO:n                   {: RESULT = n;                    :}
            | ID:i	                     {: RESULT = simbolos.get(i);      :}
;
