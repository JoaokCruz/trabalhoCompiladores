/*Documentação: http://www2.cs.tum.edu/projects/cup/*/
import java_cup.runtime.*;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    // tabela de símbolos
    java.util.Map<String, Integer> simbolos = new java.util.HashMap<String, Integer>();
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminais (tokens retornados pelo scanner). */
terminal            SEMI, MAIS, MENOS, VEZES, DIV, QUADRADO, RAIZ, GUARDAR, EM, APAR, FPAR, SE , ENTAO, SENAO, MAIOR, MENOR, IGUAL, QUE, A, PARA, ACOL, FCOL, VIRGULA, FACA, ENQUANTO, ID;
terminal Integer    NUMERO;        

/* Não terminais */
non terminal            inicio;
non terminal Integer    exp;      // utilizado para armazenar as subexpressões avaliadas

/* Precedência de operadores */
precedence left MAIS, MENOS;
precedence left VEZES, DIV, QUADRADO, RAIZ;

/* Regras da Gramática 
S ->  S E ;
    | E ;

E ->  E + E
    | E - E
    | E * E
    | E / E
    | - E
    | ( E )
    | n
    | i
    | i = E
*/
inicio ::=   inicio exp:e SEMI       {: System.out.println(e);         :}
           | exp:e SEMI              {: System.out.println(e);         :}
;

exp ::=   exp:e1 MAIS  exp:e2        {: RESULT = e1+e2;                :}
        | exp:e1 MENOS exp:e2        {: RESULT = e1-e2;                :}
        | exp:e1 VEZES exp:e2        {: RESULT = e1*e2;                :}
        | exp:e1 QUADRADO            {: RESULT = e1*e1;                :}
        | exp:e1 DIV exp:e2          {: RESULT = e1/e2;                :}
        | RAIZ exp:e1                {: RESULT = java.lang.Math.sqrt(e1);  :}
        | GUARDAR exp:e              {: simbolos.put(e);                   :}
        | MENOS exp:e                {: RESULT = -e;                   :}
        | MAIS exp:e                 {: RESULT = +e;                   :}
        | LPAREN exp:e RPAREN	     {: RESULT = e;                    :}
        | ACOL exp:e FCOL	         {: RESULT = e;                    :}
        | NUMERO:n                   {: RESULT = n;                    :}
        | ID:i	                     {: RESULT = simbolos.get(i);      :}
        | GUARDAR exp:e EM ID:i      {: simbolos.put(i.toString(), e);  :}
;